
accessControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  000005a4  00000638  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000049  00800060  00800060  00000638  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000638  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000018f2  00000000  00000000  000007e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000774  00000000  00000000  000020da  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000066d  00000000  00000000  0000284e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000400  00000000  00000000  00002ebc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000068c  00000000  00000000  000032bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010d3  00000000  00000000  00003948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000160  00000000  00000000  00004a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	 }
	 return retval;
}

unsigned int w5100::send(unsigned char sock , const unsigned char * buf, unsigned int buflen)
{
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
	uint16_t ptr,offaddr,realaddr,txsize,timeout;

	if (buflen <= 0 || sock != 0) return 0;
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_9>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
//	#if _DEBUG_MODE
//	printf("Send Size: %d\n",buflen);
//	#endif

	// Make sure the TX Free Size Register is available
	txsize=SPI_Read(SO_TX_FSR);
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 f0 00 	jmp	0x1e0	; 0x1e0 <__vector_13>
	txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
  38:	0c 94 19 01 	jmp	0x232	; 0x232 <__vector_14>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
//	#if _DEBUG_MODE
//	printf("TX Free Size: %d\n",txsize);
//	#endif

	timeout=0;
	while (txsize < buflen) {
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
		_delay_ms(1);

		txsize=SPI_Read(SO_TX_FSR);
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a9 3a       	cpi	r26, 0xA9	; 169
		txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 75 00 	call	0xea	; 0xea <main>
  74:	0c 94 d0 02 	jmp	0x5a0	; 0x5a0 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <_Z7getRFIDPc>:
  7c:	bf 92       	push	r11
  7e:	cf 92       	push	r12
  80:	df 92       	push	r13
  82:	ef 92       	push	r14
  84:	ff 92       	push	r15

		// Timeout for approx 1000 ms
		if (timeout++ > 1000) {
  86:	0f 93       	push	r16
  88:	1f 93       	push	r17
  8a:	cf 93       	push	r28
//			#if _DEBUG_MODE
//			printf("TX Free Size Error!\n");
//			#endif
			// Disconnect the connection
			disconnect(sock);
  8c:	df 93       	push	r29
  8e:	ec 01       	movw	r28, r24
  90:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN7systime10getSysTimeEv>
			return 0;
  94:	6b 01       	movw	r12, r22
  96:	7c 01       	movw	r14, r24
  98:	b1 2c       	mov	r11, r1
//	#if _DEBUG_MODE
//	printf("TX Free Size: %d\n",txsize);
//	#endif

	timeout=0;
	while (txsize < buflen) {
  9a:	0c c0       	rjmp	.+24     	; 0xb4 <_Z7getRFIDPc+0x38>
  9c:	0e 94 7e 01 	call	0x2fc	; 0x2fc <uart_available>
  a0:	89 2b       	or	r24, r25
//	#if _DEBUG_MODE
//	printf("TX Buffer: %x\n",offaddr);
//	#endif

	while(buflen) {
		buflen--;
  a2:	41 f0       	breq	.+16     	; 0xb4 <_Z7getRFIDPc+0x38>
  a4:	8e 01       	movw	r16, r28
		// Calculate the real W5100 physical Tx Buffer Address
		realaddr = TXBUFADDR + (offaddr & TX_BUF_MASK);
  a6:	0b 0d       	add	r16, r11
  a8:	11 1d       	adc	r17, r1
  aa:	0e 94 52 01 	call	0x2a4	; 0x2a4 <uart_getc>

		// Copy the application data to the W5100 Tx Buffer
		SPI_Write(realaddr,*buf);
  ae:	f8 01       	movw	r30, r16
  b0:	80 83       	st	Z, r24
  b2:	b3 94       	inc	r11
  b4:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <_ZN7systime10getSysTimeEv>
		offaddr++;
  b8:	ab 01       	movw	r20, r22
  ba:	bc 01       	movw	r22, r24
  bc:	4c 19       	sub	r20, r12
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
//	#if _DEBUG_MODE
//	printf("TX Buffer: %x\n",offaddr);
//	#endif

	while(buflen) {
  be:	5d 09       	sbc	r21, r13
  c0:	6e 09       	sbc	r22, r14
  c2:	7f 09       	sbc	r23, r15
  c4:	44 36       	cpi	r20, 0x64	; 100
  c6:	51 05       	cpc	r21, r1
		offaddr++;
		buf++;
	}

	// Increase the S0_TX_WR value, so it point to the next transmit
	SPI_Write(S0_TX_WR,(offaddr & 0xFF00) >> 8 );
  c8:	61 05       	cpc	r22, r1
  ca:	71 05       	cpc	r23, r1
  cc:	38 f3       	brcs	.-50     	; 0x9c <_Z7getRFIDPc+0x20>
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	fc e0       	ldi	r31, 0x0C	; 12
  d2:	bf 12       	cpse	r11, r31
	SPI_Write(S0_TX_WR + 1,(offaddr & 0x00FF));
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	df 91       	pop	r29
  d8:	cf 91       	pop	r28
  da:	1f 91       	pop	r17
  dc:	0f 91       	pop	r16
  de:	ff 90       	pop	r15

	// Now Send the SEND command
	SPI_Write(S0_CR,CR_SEND);
  e0:	ef 90       	pop	r14
  e2:	df 90       	pop	r13
  e4:	cf 90       	pop	r12
  e6:	bf 90       	pop	r11
  e8:	08 95       	ret

000000ea <main>:
  ea:	83 e3       	ldi	r24, 0x33	; 51

	// Wait for Sending Process
	while(SPI_Read(S0_CR));
  ec:	90 e0       	ldi	r25, 0x00	; 0
  ee:	0e 94 3e 01 	call	0x27c	; 0x27c <uart_init>
  f2:	0e 94 8d 00 	call	0x11a	; 0x11a <spi_init>
  f6:	0e 94 bd 00 	call	0x17a	; 0x17a <_ZN7systime11sysTimeInitEv>
  fa:	78 94       	sei

unsigned int w5100::send(unsigned char sock , const unsigned char * buf, unsigned int buflen)
{
	uint16_t ptr,offaddr,realaddr,txsize,timeout;

	if (buflen <= 0 || sock != 0) return 0;
  fc:	80 e0       	ldi	r24, 0x00	; 0
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	0e 94 3e 00 	call	0x7c	; 0x7c <_Z7getRFIDPc>
 104:	88 23       	and	r24, r24
 106:	d1 f3       	breq	.-12     	; 0xfc <main+0x12>
	SPI_Write(S0_CR,CR_SEND);

	// Wait for Sending Process
	while(SPI_Read(S0_CR));

	return 1;
 108:	c0 e0       	ldi	r28, 0x00	; 0
 10a:	d0 e0       	ldi	r29, 0x00	; 0
 10c:	89 91       	ld	r24, Y+
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
 10e:	0e 94 6d 01 	call	0x2da	; 0x2da <uart_putc>
 112:	cc 30       	cpi	r28, 0x0C	; 12
 114:	d1 05       	cpc	r29, r1
 116:	d1 f7       	brne	.-12     	; 0x10c <main+0x22>
 118:	f1 cf       	rjmp	.-30     	; 0xfc <main+0x12>

0000011a <spi_init>:
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
 11a:	87 b3       	in	r24, 0x17	; 23
 11c:	8f 70       	andi	r24, 0x0F	; 15
 11e:	87 bb       	out	0x17, r24	; 23
 120:	87 b3       	in	r24, 0x17	; 23
 122:	80 6b       	ori	r24, 0xB0	; 176
			return 0;
		}
	}

	// Read the Tx Write Pointer
	ptr = SPI_Read(S0_TX_WR);
 124:	87 bb       	out	0x17, r24	; 23
	offaddr = (((ptr & 0x00FF) << 8 ) + SPI_Read(S0_TX_WR + 1));
 126:	81 e5       	ldi	r24, 0x51	; 81
 128:	8d b9       	out	0x0d, r24	; 13
 12a:	81 e0       	ldi	r24, 0x01	; 1
 12c:	8e b9       	out	0x0e, r24	; 14
 12e:	08 95       	ret

00000130 <__vector_9>:
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	9f 93       	push	r25
 13e:	af 93       	push	r26

	timeout=0;
	while (txsize < buflen) {
		_delay_ms(1);

		txsize=SPI_Read(SO_TX_FSR);
 140:	bf 93       	push	r27
 142:	80 91 60 00 	lds	r24, 0x0060
 146:	90 91 61 00 	lds	r25, 0x0061
 14a:	a0 91 62 00 	lds	r26, 0x0062
		txsize=(((txsize & 0x00FF) << 8 ) + SPI_Read(SO_TX_FSR + 1));
 14e:	b0 91 63 00 	lds	r27, 0x0063
 152:	01 96       	adiw	r24, 0x01	; 1
 154:	a1 1d       	adc	r26, r1
 156:	b1 1d       	adc	r27, r1
 158:	80 93 60 00 	sts	0x0060, r24
 15c:	90 93 61 00 	sts	0x0061, r25
 160:	a0 93 62 00 	sts	0x0062, r26
 164:	b0 93 63 00 	sts	0x0063, r27
 168:	bf 91       	pop	r27

	// Wait for Sending Process
	while(SPI_Read(S0_CR));

	return 1;
}
 16a:	af 91       	pop	r26
 16c:	9f 91       	pop	r25
 16e:	8f 91       	pop	r24
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <_ZN7systime11sysTimeInitEv>:
 17a:	f8 94       	cli
 17c:	1f bc       	out	0x2f, r1	; 47
 17e:	85 e0       	ldi	r24, 0x05	; 5
 180:	8e bd       	out	0x2e, r24	; 46
 182:	84 e0       	ldi	r24, 0x04	; 4
	TCCR1A=0;
	TCCR1B=(1<<CS12)|(1<<CS10);		//use prescaler of 1024
									//counting clock is now F_OSC/1024
									//corresponding to 69.44 uS on 14.7456 MHz
	//TCCR1C=0;
	TIMSK=1<<TOIE1;				// Enable timer overflow interrupt
 184:	89 bf       	out	0x39, r24	; 57
	overflows=0;
 186:	10 92 60 00 	sts	0x0060, r1
 18a:	10 92 61 00 	sts	0x0061, r1
 18e:	10 92 62 00 	sts	0x0062, r1
 192:	10 92 63 00 	sts	0x0063, r1
	TCNT1=0;						//clear timer1 counter value
 196:	1d bc       	out	0x2d, r1	; 45
 198:	1c bc       	out	0x2c, r1	; 44
	sei();							//Enable interrupts	
 19a:	78 94       	sei
 19c:	08 95       	ret

0000019e <_ZN7systime13getSysTimeRawEv>:
//FUNCTION  : getSysTimeRaw()
//INPUT		: NONE
//OUTPUT	: returns time ticks (raw counter values with overflows) after initialisation of sysTime
unsigned long  getSysTimeRaw()			//returns the raw countervalue
{
	unsigned long temptime=TCNT1;					//get counter value at this state
 19e:	2c b5       	in	r18, 0x2c	; 44
 1a0:	3d b5       	in	r19, 0x2d	; 45
	return overflows*65536+temptime;				
 1a2:	80 91 60 00 	lds	r24, 0x0060
 1a6:	90 91 61 00 	lds	r25, 0x0061
 1aa:	a0 91 62 00 	lds	r26, 0x0062
 1ae:	b0 91 63 00 	lds	r27, 0x0063
 1b2:	dc 01       	movw	r26, r24
 1b4:	99 27       	eor	r25, r25
 1b6:	88 27       	eor	r24, r24
 1b8:	bc 01       	movw	r22, r24
 1ba:	cd 01       	movw	r24, r26
 1bc:	62 0f       	add	r22, r18
 1be:	73 1f       	adc	r23, r19
 1c0:	81 1d       	adc	r24, r1
 1c2:	91 1d       	adc	r25, r1
}
 1c4:	08 95       	ret

000001c6 <_ZN7systime10getSysTimeEv>:
//INPUT		: NONE
//OUTPUT	: returns time in milli Seconds after initialisatin of sysTime
//corresponding F_CPU will have one Tick of prescale/F_CPU time unit
unsigned long getSysTime()		
{
	return (unsigned long)(getSysTimeRaw()*0.128);
 1c6:	0e 94 cf 00 	call	0x19e	; 0x19e <_ZN7systime13getSysTimeRawEv>
 1ca:	0e 94 b7 01 	call	0x36e	; 0x36e <__floatunsisf>
 1ce:	2f e6       	ldi	r18, 0x6F	; 111
 1d0:	32 e1       	ldi	r19, 0x12	; 18
 1d2:	43 e0       	ldi	r20, 0x03	; 3
 1d4:	5e e3       	ldi	r21, 0x3E	; 62
 1d6:	0e 94 1d 02 	call	0x43a	; 0x43a <__mulsf3>
 1da:	0e 94 8b 01 	call	0x316	; 0x316 <__fixunssfsi>
}
 1de:	08 95       	ret

000001e0 <__vector_13>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 1e0:	1f 92       	push	r1
 1e2:	0f 92       	push	r0
 1e4:	0f b6       	in	r0, 0x3f	; 63
 1e6:	0f 92       	push	r0
 1e8:	11 24       	eor	r1, r1
 1ea:	2f 93       	push	r18
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	ef 93       	push	r30
 1f2:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 1f4:	8b b1       	in	r24, 0x0b	; 11
    data = UART0_DATA;
 1f6:	2c b1       	in	r18, 0x0c	; 12
    
    /* */
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
 1f8:	88 71       	andi	r24, 0x18	; 24
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 1fa:	e0 91 66 00 	lds	r30, 0x0066
 1fe:	ef 5f       	subi	r30, 0xFF	; 255
 200:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 202:	90 91 65 00 	lds	r25, 0x0065
 206:	e9 17       	cp	r30, r25
 208:	39 f0       	breq	.+14     	; 0x218 <__vector_13+0x38>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 20a:	e0 93 66 00 	sts	0x0066, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	e7 59       	subi	r30, 0x97	; 151
 212:	ff 4f       	sbci	r31, 0xFF	; 255
 214:	20 83       	st	Z, r18
 216:	01 c0       	rjmp	.+2      	; 0x21a <__vector_13+0x3a>
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 218:	82 e0       	ldi	r24, 0x02	; 2
        /* store new index */
        UART_RxHead = tmphead;
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    }
    UART_LastRxError = lastRxError;   
 21a:	80 93 64 00 	sts	0x0064, r24
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	9f 91       	pop	r25
 224:	8f 91       	pop	r24
 226:	2f 91       	pop	r18
 228:	0f 90       	pop	r0
 22a:	0f be       	out	0x3f, r0	; 63
 22c:	0f 90       	pop	r0
 22e:	1f 90       	pop	r1
 230:	18 95       	reti

00000232 <__vector_14>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 232:	1f 92       	push	r1
 234:	0f 92       	push	r0
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	0f 92       	push	r0
 23a:	11 24       	eor	r1, r1
 23c:	8f 93       	push	r24
 23e:	9f 93       	push	r25
 240:	ef 93       	push	r30
 242:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 244:	90 91 68 00 	lds	r25, 0x0068
 248:	80 91 67 00 	lds	r24, 0x0067
 24c:	98 17       	cp	r25, r24
 24e:	61 f0       	breq	.+24     	; 0x268 <__vector_14+0x36>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 250:	e0 91 67 00 	lds	r30, 0x0067
 254:	ef 5f       	subi	r30, 0xFF	; 255
 256:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 258:	e0 93 67 00 	sts	0x0067, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 25c:	f0 e0       	ldi	r31, 0x00	; 0
 25e:	e7 57       	subi	r30, 0x77	; 119
 260:	ff 4f       	sbci	r31, 0xFF	; 255
 262:	80 81       	ld	r24, Z
 264:	8c b9       	out	0x0c, r24	; 12
 266:	01 c0       	rjmp	.+2      	; 0x26a <__vector_14+0x38>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 268:	55 98       	cbi	0x0a, 5	; 10
    }
}
 26a:	ff 91       	pop	r31
 26c:	ef 91       	pop	r30
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 27c:	10 92 68 00 	sts	0x0068, r1
    UART_TxTail = 0;
 280:	10 92 67 00 	sts	0x0067, r1
    UART_RxHead = 0;
 284:	10 92 66 00 	sts	0x0066, r1
    UART_RxTail = 0;
 288:	10 92 65 00 	sts	0x0065, r1
    /* enable UART receiver and transmmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|_BV(RXEN)|_BV(TXEN);

#elif defined (ATMEGA_USART)
    /* Set baud rate */
    if ( baudrate & 0x8000 )
 28c:	99 23       	and	r25, r25
 28e:	1c f4       	brge	.+6      	; 0x296 <uart_init+0x1a>
    {
    	 UART0_STATUS = (1<<U2X);  //Enable 2x speed 
 290:	22 e0       	ldi	r18, 0x02	; 2
 292:	2b b9       	out	0x0b, r18	; 11
    	 baudrate &= ~0x8000;
 294:	9f 77       	andi	r25, 0x7F	; 127
    }
    UBRRH = (unsigned char)(baudrate>>8);
 296:	90 bd       	out	0x20, r25	; 32
    UBRRL = (unsigned char) baudrate;
 298:	89 b9       	out	0x09, r24	; 9
   
    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);
 29a:	88 e9       	ldi	r24, 0x98	; 152
 29c:	8a b9       	out	0x0a, r24	; 10
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL
    UCSRC = (1<<URSEL)|(3<<UCSZ0);
 29e:	86 e8       	ldi	r24, 0x86	; 134
 2a0:	80 bd       	out	0x20, r24	; 32
 2a2:	08 95       	ret

000002a4 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 2a4:	90 91 66 00 	lds	r25, 0x0066
 2a8:	80 91 65 00 	lds	r24, 0x0065
 2ac:	98 17       	cp	r25, r24
 2ae:	91 f0       	breq	.+36     	; 0x2d4 <uart_getc+0x30>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 2b0:	e0 91 65 00 	lds	r30, 0x0065
 2b4:	ef 5f       	subi	r30, 0xFF	; 255
 2b6:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 2b8:	e0 93 65 00 	sts	0x0065, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 2bc:	f0 e0       	ldi	r31, 0x00	; 0
 2be:	e7 59       	subi	r30, 0x97	; 151
 2c0:	ff 4f       	sbci	r31, 0xFF	; 255
 2c2:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 2c4:	80 91 64 00 	lds	r24, 0x0064
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	98 2f       	mov	r25, r24
 2cc:	88 27       	eor	r24, r24
 2ce:	82 0f       	add	r24, r18
 2d0:	91 1d       	adc	r25, r1
 2d2:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 2d8:	08 95       	ret

000002da <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 2da:	20 91 68 00 	lds	r18, 0x0068
 2de:	2f 5f       	subi	r18, 0xFF	; 255
 2e0:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 2e2:	90 91 67 00 	lds	r25, 0x0067
 2e6:	29 17       	cp	r18, r25
 2e8:	e1 f3       	breq	.-8      	; 0x2e2 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 2ea:	e2 2f       	mov	r30, r18
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	e7 57       	subi	r30, 0x77	; 119
 2f0:	ff 4f       	sbci	r31, 0xFF	; 255
 2f2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 2f4:	20 93 68 00 	sts	0x0068, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 2f8:	55 9a       	sbi	0x0a, 5	; 10
 2fa:	08 95       	ret

000002fc <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 2fc:	80 91 66 00 	lds	r24, 0x0066
 300:	20 91 65 00 	lds	r18, 0x0065
 304:	90 e0       	ldi	r25, 0x00	; 0
 306:	4f 96       	adiw	r24, 0x1f	; 31
 308:	82 1b       	sub	r24, r18
 30a:	91 09       	sbc	r25, r1
 30c:	6f e1       	ldi	r22, 0x1F	; 31
 30e:	70 e0       	ldi	r23, 0x00	; 0
 310:	0e 94 a8 02 	call	0x550	; 0x550 <__divmodhi4>
}/* uart_available */
 314:	08 95       	ret

00000316 <__fixunssfsi>:
 316:	70 d0       	rcall	.+224    	; 0x3f8 <__fp_splitA>
 318:	88 f0       	brcs	.+34     	; 0x33c <__fixunssfsi+0x26>
 31a:	9f 57       	subi	r25, 0x7F	; 127
 31c:	90 f0       	brcs	.+36     	; 0x342 <__fixunssfsi+0x2c>
 31e:	b9 2f       	mov	r27, r25
 320:	99 27       	eor	r25, r25
 322:	b7 51       	subi	r27, 0x17	; 23
 324:	a0 f0       	brcs	.+40     	; 0x34e <__fixunssfsi+0x38>
 326:	d1 f0       	breq	.+52     	; 0x35c <__fixunssfsi+0x46>
 328:	66 0f       	add	r22, r22
 32a:	77 1f       	adc	r23, r23
 32c:	88 1f       	adc	r24, r24
 32e:	99 1f       	adc	r25, r25
 330:	1a f0       	brmi	.+6      	; 0x338 <__fixunssfsi+0x22>
 332:	ba 95       	dec	r27
 334:	c9 f7       	brne	.-14     	; 0x328 <__fixunssfsi+0x12>
 336:	12 c0       	rjmp	.+36     	; 0x35c <__fixunssfsi+0x46>
 338:	b1 30       	cpi	r27, 0x01	; 1
 33a:	81 f0       	breq	.+32     	; 0x35c <__fixunssfsi+0x46>
 33c:	77 d0       	rcall	.+238    	; 0x42c <__fp_zero>
 33e:	b1 e0       	ldi	r27, 0x01	; 1
 340:	08 95       	ret
 342:	74 c0       	rjmp	.+232    	; 0x42c <__fp_zero>
 344:	67 2f       	mov	r22, r23
 346:	78 2f       	mov	r23, r24
 348:	88 27       	eor	r24, r24
 34a:	b8 5f       	subi	r27, 0xF8	; 248
 34c:	39 f0       	breq	.+14     	; 0x35c <__fixunssfsi+0x46>
 34e:	b9 3f       	cpi	r27, 0xF9	; 249
 350:	cc f3       	brlt	.-14     	; 0x344 <__fixunssfsi+0x2e>
 352:	86 95       	lsr	r24
 354:	77 95       	ror	r23
 356:	67 95       	ror	r22
 358:	b3 95       	inc	r27
 35a:	d9 f7       	brne	.-10     	; 0x352 <__fixunssfsi+0x3c>
 35c:	3e f4       	brtc	.+14     	; 0x36c <__fixunssfsi+0x56>
 35e:	90 95       	com	r25
 360:	80 95       	com	r24
 362:	70 95       	com	r23
 364:	61 95       	neg	r22
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	8f 4f       	sbci	r24, 0xFF	; 255
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__floatunsisf>:
 36e:	e8 94       	clt
 370:	09 c0       	rjmp	.+18     	; 0x384 <__floatsisf+0x12>

00000372 <__floatsisf>:
 372:	97 fb       	bst	r25, 7
 374:	3e f4       	brtc	.+14     	; 0x384 <__floatsisf+0x12>
 376:	90 95       	com	r25
 378:	80 95       	com	r24
 37a:	70 95       	com	r23
 37c:	61 95       	neg	r22
 37e:	7f 4f       	sbci	r23, 0xFF	; 255
 380:	8f 4f       	sbci	r24, 0xFF	; 255
 382:	9f 4f       	sbci	r25, 0xFF	; 255
 384:	99 23       	and	r25, r25
 386:	a9 f0       	breq	.+42     	; 0x3b2 <__floatsisf+0x40>
 388:	f9 2f       	mov	r31, r25
 38a:	96 e9       	ldi	r25, 0x96	; 150
 38c:	bb 27       	eor	r27, r27
 38e:	93 95       	inc	r25
 390:	f6 95       	lsr	r31
 392:	87 95       	ror	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b7 95       	ror	r27
 39a:	f1 11       	cpse	r31, r1
 39c:	f8 cf       	rjmp	.-16     	; 0x38e <__floatsisf+0x1c>
 39e:	fa f4       	brpl	.+62     	; 0x3de <__floatsisf+0x6c>
 3a0:	bb 0f       	add	r27, r27
 3a2:	11 f4       	brne	.+4      	; 0x3a8 <__floatsisf+0x36>
 3a4:	60 ff       	sbrs	r22, 0
 3a6:	1b c0       	rjmp	.+54     	; 0x3de <__floatsisf+0x6c>
 3a8:	6f 5f       	subi	r22, 0xFF	; 255
 3aa:	7f 4f       	sbci	r23, 0xFF	; 255
 3ac:	8f 4f       	sbci	r24, 0xFF	; 255
 3ae:	9f 4f       	sbci	r25, 0xFF	; 255
 3b0:	16 c0       	rjmp	.+44     	; 0x3de <__floatsisf+0x6c>
 3b2:	88 23       	and	r24, r24
 3b4:	11 f0       	breq	.+4      	; 0x3ba <__floatsisf+0x48>
 3b6:	96 e9       	ldi	r25, 0x96	; 150
 3b8:	11 c0       	rjmp	.+34     	; 0x3dc <__floatsisf+0x6a>
 3ba:	77 23       	and	r23, r23
 3bc:	21 f0       	breq	.+8      	; 0x3c6 <__floatsisf+0x54>
 3be:	9e e8       	ldi	r25, 0x8E	; 142
 3c0:	87 2f       	mov	r24, r23
 3c2:	76 2f       	mov	r23, r22
 3c4:	05 c0       	rjmp	.+10     	; 0x3d0 <__floatsisf+0x5e>
 3c6:	66 23       	and	r22, r22
 3c8:	71 f0       	breq	.+28     	; 0x3e6 <__floatsisf+0x74>
 3ca:	96 e8       	ldi	r25, 0x86	; 134
 3cc:	86 2f       	mov	r24, r22
 3ce:	70 e0       	ldi	r23, 0x00	; 0
 3d0:	60 e0       	ldi	r22, 0x00	; 0
 3d2:	2a f0       	brmi	.+10     	; 0x3de <__floatsisf+0x6c>
 3d4:	9a 95       	dec	r25
 3d6:	66 0f       	add	r22, r22
 3d8:	77 1f       	adc	r23, r23
 3da:	88 1f       	adc	r24, r24
 3dc:	da f7       	brpl	.-10     	; 0x3d4 <__floatsisf+0x62>
 3de:	88 0f       	add	r24, r24
 3e0:	96 95       	lsr	r25
 3e2:	87 95       	ror	r24
 3e4:	97 f9       	bld	r25, 7
 3e6:	08 95       	ret

000003e8 <__fp_split3>:
 3e8:	57 fd       	sbrc	r21, 7
 3ea:	90 58       	subi	r25, 0x80	; 128
 3ec:	44 0f       	add	r20, r20
 3ee:	55 1f       	adc	r21, r21
 3f0:	59 f0       	breq	.+22     	; 0x408 <__fp_splitA+0x10>
 3f2:	5f 3f       	cpi	r21, 0xFF	; 255
 3f4:	71 f0       	breq	.+28     	; 0x412 <__fp_splitA+0x1a>
 3f6:	47 95       	ror	r20

000003f8 <__fp_splitA>:
 3f8:	88 0f       	add	r24, r24
 3fa:	97 fb       	bst	r25, 7
 3fc:	99 1f       	adc	r25, r25
 3fe:	61 f0       	breq	.+24     	; 0x418 <__fp_splitA+0x20>
 400:	9f 3f       	cpi	r25, 0xFF	; 255
 402:	79 f0       	breq	.+30     	; 0x422 <__fp_splitA+0x2a>
 404:	87 95       	ror	r24
 406:	08 95       	ret
 408:	12 16       	cp	r1, r18
 40a:	13 06       	cpc	r1, r19
 40c:	14 06       	cpc	r1, r20
 40e:	55 1f       	adc	r21, r21
 410:	f2 cf       	rjmp	.-28     	; 0x3f6 <__fp_split3+0xe>
 412:	46 95       	lsr	r20
 414:	f1 df       	rcall	.-30     	; 0x3f8 <__fp_splitA>
 416:	08 c0       	rjmp	.+16     	; 0x428 <__fp_splitA+0x30>
 418:	16 16       	cp	r1, r22
 41a:	17 06       	cpc	r1, r23
 41c:	18 06       	cpc	r1, r24
 41e:	99 1f       	adc	r25, r25
 420:	f1 cf       	rjmp	.-30     	; 0x404 <__fp_splitA+0xc>
 422:	86 95       	lsr	r24
 424:	71 05       	cpc	r23, r1
 426:	61 05       	cpc	r22, r1
 428:	08 94       	sec
 42a:	08 95       	ret

0000042c <__fp_zero>:
 42c:	e8 94       	clt

0000042e <__fp_szero>:
 42e:	bb 27       	eor	r27, r27
 430:	66 27       	eor	r22, r22
 432:	77 27       	eor	r23, r23
 434:	cb 01       	movw	r24, r22
 436:	97 f9       	bld	r25, 7
 438:	08 95       	ret

0000043a <__mulsf3>:
 43a:	0b d0       	rcall	.+22     	; 0x452 <__mulsf3x>
 43c:	78 c0       	rjmp	.+240    	; 0x52e <__fp_round>
 43e:	69 d0       	rcall	.+210    	; 0x512 <__fp_pscA>
 440:	28 f0       	brcs	.+10     	; 0x44c <__mulsf3+0x12>
 442:	6e d0       	rcall	.+220    	; 0x520 <__fp_pscB>
 444:	18 f0       	brcs	.+6      	; 0x44c <__mulsf3+0x12>
 446:	95 23       	and	r25, r21
 448:	09 f0       	breq	.+2      	; 0x44c <__mulsf3+0x12>
 44a:	5a c0       	rjmp	.+180    	; 0x500 <__fp_inf>
 44c:	5f c0       	rjmp	.+190    	; 0x50c <__fp_nan>
 44e:	11 24       	eor	r1, r1
 450:	ee cf       	rjmp	.-36     	; 0x42e <__fp_szero>

00000452 <__mulsf3x>:
 452:	ca df       	rcall	.-108    	; 0x3e8 <__fp_split3>
 454:	a0 f3       	brcs	.-24     	; 0x43e <__mulsf3+0x4>

00000456 <__mulsf3_pse>:
 456:	95 9f       	mul	r25, r21
 458:	d1 f3       	breq	.-12     	; 0x44e <__mulsf3+0x14>
 45a:	95 0f       	add	r25, r21
 45c:	50 e0       	ldi	r21, 0x00	; 0
 45e:	55 1f       	adc	r21, r21
 460:	62 9f       	mul	r22, r18
 462:	f0 01       	movw	r30, r0
 464:	72 9f       	mul	r23, r18
 466:	bb 27       	eor	r27, r27
 468:	f0 0d       	add	r31, r0
 46a:	b1 1d       	adc	r27, r1
 46c:	63 9f       	mul	r22, r19
 46e:	aa 27       	eor	r26, r26
 470:	f0 0d       	add	r31, r0
 472:	b1 1d       	adc	r27, r1
 474:	aa 1f       	adc	r26, r26
 476:	64 9f       	mul	r22, r20
 478:	66 27       	eor	r22, r22
 47a:	b0 0d       	add	r27, r0
 47c:	a1 1d       	adc	r26, r1
 47e:	66 1f       	adc	r22, r22
 480:	82 9f       	mul	r24, r18
 482:	22 27       	eor	r18, r18
 484:	b0 0d       	add	r27, r0
 486:	a1 1d       	adc	r26, r1
 488:	62 1f       	adc	r22, r18
 48a:	73 9f       	mul	r23, r19
 48c:	b0 0d       	add	r27, r0
 48e:	a1 1d       	adc	r26, r1
 490:	62 1f       	adc	r22, r18
 492:	83 9f       	mul	r24, r19
 494:	a0 0d       	add	r26, r0
 496:	61 1d       	adc	r22, r1
 498:	22 1f       	adc	r18, r18
 49a:	74 9f       	mul	r23, r20
 49c:	33 27       	eor	r19, r19
 49e:	a0 0d       	add	r26, r0
 4a0:	61 1d       	adc	r22, r1
 4a2:	23 1f       	adc	r18, r19
 4a4:	84 9f       	mul	r24, r20
 4a6:	60 0d       	add	r22, r0
 4a8:	21 1d       	adc	r18, r1
 4aa:	82 2f       	mov	r24, r18
 4ac:	76 2f       	mov	r23, r22
 4ae:	6a 2f       	mov	r22, r26
 4b0:	11 24       	eor	r1, r1
 4b2:	9f 57       	subi	r25, 0x7F	; 127
 4b4:	50 40       	sbci	r21, 0x00	; 0
 4b6:	8a f0       	brmi	.+34     	; 0x4da <__mulsf3_pse+0x84>
 4b8:	e1 f0       	breq	.+56     	; 0x4f2 <__mulsf3_pse+0x9c>
 4ba:	88 23       	and	r24, r24
 4bc:	4a f0       	brmi	.+18     	; 0x4d0 <__mulsf3_pse+0x7a>
 4be:	ee 0f       	add	r30, r30
 4c0:	ff 1f       	adc	r31, r31
 4c2:	bb 1f       	adc	r27, r27
 4c4:	66 1f       	adc	r22, r22
 4c6:	77 1f       	adc	r23, r23
 4c8:	88 1f       	adc	r24, r24
 4ca:	91 50       	subi	r25, 0x01	; 1
 4cc:	50 40       	sbci	r21, 0x00	; 0
 4ce:	a9 f7       	brne	.-22     	; 0x4ba <__mulsf3_pse+0x64>
 4d0:	9e 3f       	cpi	r25, 0xFE	; 254
 4d2:	51 05       	cpc	r21, r1
 4d4:	70 f0       	brcs	.+28     	; 0x4f2 <__mulsf3_pse+0x9c>
 4d6:	14 c0       	rjmp	.+40     	; 0x500 <__fp_inf>
 4d8:	aa cf       	rjmp	.-172    	; 0x42e <__fp_szero>
 4da:	5f 3f       	cpi	r21, 0xFF	; 255
 4dc:	ec f3       	brlt	.-6      	; 0x4d8 <__mulsf3_pse+0x82>
 4de:	98 3e       	cpi	r25, 0xE8	; 232
 4e0:	dc f3       	brlt	.-10     	; 0x4d8 <__mulsf3_pse+0x82>
 4e2:	86 95       	lsr	r24
 4e4:	77 95       	ror	r23
 4e6:	67 95       	ror	r22
 4e8:	b7 95       	ror	r27
 4ea:	f7 95       	ror	r31
 4ec:	e7 95       	ror	r30
 4ee:	9f 5f       	subi	r25, 0xFF	; 255
 4f0:	c1 f7       	brne	.-16     	; 0x4e2 <__mulsf3_pse+0x8c>
 4f2:	fe 2b       	or	r31, r30
 4f4:	88 0f       	add	r24, r24
 4f6:	91 1d       	adc	r25, r1
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	97 f9       	bld	r25, 7
 4fe:	08 95       	ret

00000500 <__fp_inf>:
 500:	97 f9       	bld	r25, 7
 502:	9f 67       	ori	r25, 0x7F	; 127
 504:	80 e8       	ldi	r24, 0x80	; 128
 506:	70 e0       	ldi	r23, 0x00	; 0
 508:	60 e0       	ldi	r22, 0x00	; 0
 50a:	08 95       	ret

0000050c <__fp_nan>:
 50c:	9f ef       	ldi	r25, 0xFF	; 255
 50e:	80 ec       	ldi	r24, 0xC0	; 192
 510:	08 95       	ret

00000512 <__fp_pscA>:
 512:	00 24       	eor	r0, r0
 514:	0a 94       	dec	r0
 516:	16 16       	cp	r1, r22
 518:	17 06       	cpc	r1, r23
 51a:	18 06       	cpc	r1, r24
 51c:	09 06       	cpc	r0, r25
 51e:	08 95       	ret

00000520 <__fp_pscB>:
 520:	00 24       	eor	r0, r0
 522:	0a 94       	dec	r0
 524:	12 16       	cp	r1, r18
 526:	13 06       	cpc	r1, r19
 528:	14 06       	cpc	r1, r20
 52a:	05 06       	cpc	r0, r21
 52c:	08 95       	ret

0000052e <__fp_round>:
 52e:	09 2e       	mov	r0, r25
 530:	03 94       	inc	r0
 532:	00 0c       	add	r0, r0
 534:	11 f4       	brne	.+4      	; 0x53a <__fp_round+0xc>
 536:	88 23       	and	r24, r24
 538:	52 f0       	brmi	.+20     	; 0x54e <__fp_round+0x20>
 53a:	bb 0f       	add	r27, r27
 53c:	40 f4       	brcc	.+16     	; 0x54e <__fp_round+0x20>
 53e:	bf 2b       	or	r27, r31
 540:	11 f4       	brne	.+4      	; 0x546 <__fp_round+0x18>
 542:	60 ff       	sbrs	r22, 0
 544:	04 c0       	rjmp	.+8      	; 0x54e <__fp_round+0x20>
 546:	6f 5f       	subi	r22, 0xFF	; 255
 548:	7f 4f       	sbci	r23, 0xFF	; 255
 54a:	8f 4f       	sbci	r24, 0xFF	; 255
 54c:	9f 4f       	sbci	r25, 0xFF	; 255
 54e:	08 95       	ret

00000550 <__divmodhi4>:
 550:	97 fb       	bst	r25, 7
 552:	07 2e       	mov	r0, r23
 554:	16 f4       	brtc	.+4      	; 0x55a <__divmodhi4+0xa>
 556:	00 94       	com	r0
 558:	07 d0       	rcall	.+14     	; 0x568 <__divmodhi4_neg1>
 55a:	77 fd       	sbrc	r23, 7
 55c:	09 d0       	rcall	.+18     	; 0x570 <__divmodhi4_neg2>
 55e:	0e 94 bc 02 	call	0x578	; 0x578 <__udivmodhi4>
 562:	07 fc       	sbrc	r0, 7
 564:	05 d0       	rcall	.+10     	; 0x570 <__divmodhi4_neg2>
 566:	3e f4       	brtc	.+14     	; 0x576 <__divmodhi4_exit>

00000568 <__divmodhi4_neg1>:
 568:	90 95       	com	r25
 56a:	81 95       	neg	r24
 56c:	9f 4f       	sbci	r25, 0xFF	; 255
 56e:	08 95       	ret

00000570 <__divmodhi4_neg2>:
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255

00000576 <__divmodhi4_exit>:
 576:	08 95       	ret

00000578 <__udivmodhi4>:
 578:	aa 1b       	sub	r26, r26
 57a:	bb 1b       	sub	r27, r27
 57c:	51 e1       	ldi	r21, 0x11	; 17
 57e:	07 c0       	rjmp	.+14     	; 0x58e <__udivmodhi4_ep>

00000580 <__udivmodhi4_loop>:
 580:	aa 1f       	adc	r26, r26
 582:	bb 1f       	adc	r27, r27
 584:	a6 17       	cp	r26, r22
 586:	b7 07       	cpc	r27, r23
 588:	10 f0       	brcs	.+4      	; 0x58e <__udivmodhi4_ep>
 58a:	a6 1b       	sub	r26, r22
 58c:	b7 0b       	sbc	r27, r23

0000058e <__udivmodhi4_ep>:
 58e:	88 1f       	adc	r24, r24
 590:	99 1f       	adc	r25, r25
 592:	5a 95       	dec	r21
 594:	a9 f7       	brne	.-22     	; 0x580 <__udivmodhi4_loop>
 596:	80 95       	com	r24
 598:	90 95       	com	r25
 59a:	bc 01       	movw	r22, r24
 59c:	cd 01       	movw	r24, r26
 59e:	08 95       	ret

000005a0 <_exit>:
 5a0:	f8 94       	cli

000005a2 <__stop_program>:
 5a2:	ff cf       	rjmp	.-2      	; 0x5a2 <__stop_program>
